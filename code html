<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" href="https://glitch.com/favicon.ico" />

    <!--
      This is the page head - it contains info the browser uses
      Like the title, which appears on the browser tab but not inside the page
      Further down you'll see the content that displays in the page
    -->

    <title>Hello World!</title>
  </head>
  <body>
    <div>Teachable Machine Image Model</div>
    <button type="button" onclick="init()">Start</button>
    <div id="webcam-container" style="display: flex; flex-direction: column; align-items: center;">
      <div id="webcam-canvas-container"></div>
      <div id="label-container" style="font-size: 68px;"></div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
    <script src="https://code.responsivevoice.org/responsivevoice.js?key=4cs1cIUk"></script>
    <script type="text/javascript">
        

        // the link to your model provided by Teachable Machine export panel
        const URL = "https://teachablemachine.withgoogle.com/models/6Aqifikid/";

        let model, webcam, labelContainer, maxPredictions;
        let lastLabel = '';

        // Load the image model and setup the webcam
        async function init() {
            const modelURL = URL + "model.json";
            const metadataURL = URL + "metadata.json";

            // load the model and metadata
            // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
            // or files from your local hard drive
            // Note: the pose library adds "tmImage" object to your window (window.tmImage)
            model = await tmImage.load(modelURL, metadataURL);
            maxPredictions = model.getTotalClasses();

            // Convenience function to setup a webcam
            const flip = true; // whether to flip the webcam
            webcam = new tmImage.Webcam(600, 600, flip); // width, height, flip
            await webcam.setup(); // request access to the webcam
            await webcam.play();
            window.requestAnimationFrame(loop);

            // append elements to the DOM
            const webcamContainer = document.getElementById("webcam-container");
            const webcamCanvasContainer = document.getElementById("webcam-canvas-container");
            webcamCanvasContainer.appendChild(webcam.canvas);
            labelContainer = document.getElementById("label-container");
        }

        async function loop() {
            webcam.update(); // update the webcam frame
            await predict();
            window.requestAnimationFrame(loop);
        }

        // run the webcam image through the image model
        async function predict() {
            // predict can take in an image, video or canvas html element
            const predictions = await model.predictTopK(webcam.canvas, 1);
            const label = predictions[0].className;
            if (label !== lastLabel) {
                lastLabel = label;
                responsiveVoice.speak(label, "Vietnamese Male");
                labelContainer.innerText = predictions[0].className;
            }
        }
    </script>
  </body>
</html>
